# Generated by Django 4.1.6 on 2023-02-26 21:11

import backend.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'Email already registered.'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('company', models.CharField(blank=True, max_length=45, verbose_name='Компания')),
                ('position', models.CharField(blank=True, max_length=45, verbose_name='Должность')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активен')),
                ('type', models.CharField(choices=[('supplier', 'Поставщик'), ('buyer', 'Покупатель')], default='buyer', max_length=10, verbose_name='Тип пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('type', 'email'),
            },
            managers=[
                ('objects', backend.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Buyer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, verbose_name='Название')),
                ('person', models.CharField(max_length=70, verbose_name='Контактное лицо')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('region', models.CharField(blank=True, max_length=30, verbose_name='Регион')),
                ('district', models.CharField(blank=True, max_length=30, verbose_name='Район')),
                ('locality_name', models.CharField(max_length=50, verbose_name='Название населенного пункта')),
                ('street', models.CharField(blank=True, max_length=80, verbose_name='Улица')),
                ('house', models.CharField(blank=True, max_length=15, verbose_name='Дом')),
                ('structure', models.CharField(blank=True, max_length=15, verbose_name='Корпус')),
                ('building', models.CharField(blank=True, max_length=15, verbose_name='Строение')),
                ('apartment', models.CharField(blank=True, max_length=15, verbose_name='Квартира')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyers', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Покупатель',
                'verbose_name_plural': 'Список покупателей',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('state', models.CharField(choices=[('basket', 'В корзине'), ('new', 'Новый'), ('confirmed', 'Подтвержден'), ('assembled', 'Собран'), ('sent', 'Отправлен'), ('delivered', 'Доставлен'), ('canceled', 'Отменен')], default='basket', max_length=15, verbose_name='Статус')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='backend.buyer', verbose_name='Покупатель')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Список заказов',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Название параметра',
                'verbose_name_plural': 'Список названий параметров',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Список продуктов',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ProductSupplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.PositiveIntegerField(verbose_name='Внешний ID')),
                ('model', models.CharField(max_length=100, verbose_name='Модель')),
                ('price', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Цена')),
                ('price_rrc', models.DecimalField(decimal_places=2, max_digits=9, verbose_name='Розничная цена')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество')),
                ('product', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='s_products', to='backend.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Информация о продукте поставщика',
                'verbose_name_plural': 'Информация о продуктах поставщика',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, verbose_name='Название')),
                ('person', models.CharField(max_length=70, verbose_name='Контактное лицо')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('file_url', models.URLField(blank=True, null=True, verbose_name='Ссылка на файл')),
                ('is_available', models.BooleanField(default=True, verbose_name='Доступность для заказа')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suppliers', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Поставщик',
                'verbose_name_plural': 'Список поставщиков',
                'ordering': ('-is_available', 'id'),
            },
        ),
        migrations.CreateModel(
            name='ProductSupplierParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=120, verbose_name='Значение')),
                ('parameter', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='p_parameters', to='backend.parameter', verbose_name='Параметр')),
                ('product_supplier', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='p_parameters', to='backend.productsupplier', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Параметр продукта поставщика',
                'verbose_name_plural': 'Список параметров',
            },
        ),
        migrations.AddField(
            model_name='productsupplier',
            name='supplier',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='s_products', to='backend.supplier', verbose_name='Поставщик'),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Категория')),
                ('suppliers', models.ManyToManyField(blank=True, related_name='categories', to='backend.supplier', verbose_name='Поставщики')),
            ],
            options={
                'verbose_name': 'Категория продукта',
                'verbose_name_plural': 'Список категорий',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='backend.productcategory', verbose_name='Категория'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество')),
                ('order', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='backend.order', verbose_name='Заказ')),
                ('product_supplier', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='backend.productsupplier', verbose_name='Информация о продукте')),
            ],
            options={
                'verbose_name': 'Заказанная позиция',
                'verbose_name_plural': 'Список заказанных позиций',
            },
        ),
        migrations.CreateModel(
            name='ConfirmEmailToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_token', models.CharField(db_index=True, max_length=64, unique=True, verbose_name='Токен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Сгенерирован')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirm_email_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Токен подтверждения email',
                'verbose_name_plural': 'Токены подтверждения email',
            },
        ),
        migrations.AddConstraint(
            model_name='productsupplierparameter',
            constraint=models.UniqueConstraint(fields=('product_supplier', 'parameter'), name='unique_product_parameter'),
        ),
        migrations.AddConstraint(
            model_name='productsupplier',
            constraint=models.UniqueConstraint(fields=('product', 'supplier'), name='unique_product_supplier'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.UniqueConstraint(condition=models.Q(('quantity__gt', 0)), fields=('order', 'product_supplier'), name='unique_order_item'),
        ),
    ]
